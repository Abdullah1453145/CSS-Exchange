# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

<#
.SYNOPSIS
    This script removes the TokenCacheModule from IIS to protect Exchange Server against CVE-2023-21709.
.DESCRIPTION
    The script removes the TokenCacheModule from IIS to protect Exchange Server against CVE-2023-21709.
    It comes with a parameter that allows you to explicitly specify a subset of Exchange servers on which the TokenCacheModule
    should be removed or restored (ExchangeServerNames).
    It's also possible to exclude a subset of Exchange servers from the operation performed by the script (SkipExchangeServerNames).
.PARAMETER ExchangeServerNames
    Use this parameter to explicitly specify the Exchange servers on which the TokenCacheModule should be removed or restored.
.PARAMETER SkipExchangeServerNames
    Use this parameter to explicitly exclude Exchange servers from removing or restoring the TokenCacheModule.
.PARAMETER Rollback
    Use this parameter rollback the CVE-2023-21709 solution and add the TokenCacheModule back to IIS.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1
    It will remove the TokenCacheModule from all of the Exchange servers in the organization.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1 -ExchangeServerNames <Array_of_Server_Names>
    It will remove the TokenCacheModule from all of the Exchange servers provided via -ExchangeServerNames parameter.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1 -SkipExchangeServerNames <Array_of_Server_Names>
    It will remove the TokenCacheModule from all of the Exchange servers in the organization except the Exchange servers provided via -SkipExchangeServerNames parameter.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1 -Rollback
    It will restore the TokenCacheModule on all Exchange servers within the organization.
#>
[CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = 'High')]

param(
    [string[]]$ExchangeServerNames = $null,

    [string[]]$SkipExchangeServerNames = $null,

    [switch]$Rollback
)

begin {
    $BuildVersion = ""

    . $PSScriptRoot\WriteFunctions.ps1
    . $PSScriptRoot\ConfigurationAction\Invoke-ConfigureMitigation.ps1
    . $PSScriptRoot\ConfigurationAction\Invoke-Rollback.ps1
    . $PSScriptRoot\..\..\..\Shared\OutputOverrides\Write-Host.ps1
    . $PSScriptRoot\..\..\..\Shared\OutputOverrides\Write-Progress.ps1
    . $PSScriptRoot\..\..\..\Shared\OutputOverrides\Write-Verbose.ps1
    . $PSScriptRoot\..\..\..\Shared\OutputOverrides\Write-Warning.ps1
    . $PSScriptRoot\..\..\..\Shared\ScriptUpdateFunctions\Test-ScriptVersion.ps1
    . $PSScriptRoot\..\..\..\Shared\Confirm-Administrator.ps1
    . $PSScriptRoot\..\..\..\Shared\Confirm-ExchangeShell.ps1
    . $PSScriptRoot\..\..\..\Shared\LoggerFunctions.ps1
    . $PSScriptRoot\..\..\..\Shared\Out-Columns.ps1
    . $PSScriptRoot\..\..\..\Shared\Show-Disclaimer.ps1

    $Script:Logger = Get-NewLoggerInstance -LogName "CVE-2023-21709-$((Get-Date).ToString("yyyyMMddhhmmss"))-Debug" `
        -AppendDateTimeToFileName $false `
        -ErrorAction SilentlyContinue

    SetWriteHostAction ${Function:Write-HostLog}
    SetWriteVerboseAction ${Function:Write-VerboseLog}
    SetWriteWarningAction ${Function:Write-HostLog}
    SetWriteProgressAction ${Function:Write-HostLog}
} end {
    if (-not (Confirm-Administrator)) {
        Write-Warning "The script needs to be executed in elevated mode. Start the shell as an Administrator."
        exit
    }

    Write-Host ("CVE-2023-21709 script version $($BuildVersion)") -ForegroundColor Green
    $versionsUrl = "https://aka.ms/CVE-2023-21709-VersionsUrl"
    if (Test-ScriptVersion -AutoUpdate -VersionsUrl $versionsUrl -Confirm:$false) {
        Write-Host ("Script was updated. Please re-run the command") -ForegroundColor Yellow
        return
    }

    $exchangeShell = Confirm-ExchangeShell
    if (-not($exchangeShell.ShellLoaded)) {
        Write-Warning "Failed to load the Exchange Management Shell. Start the script using the Exchange Management Shell."
        exit
    } elseif (-not($exchangeShell.EMS)) {
        Write-Warning "This script requires to be run inside of Exchange Management Shell. Please run on an Exchange Management Server or an Exchange Server with Exchange Management Shell."
        exit
    }

    try {
        if (-not $Rollback) {
            $params = @{
                Message   = "Display Warning about removing TokenCacheModule"
                Target    = "TokenCacheModule is recommended to be removed from IIS for security reasons. " +
                "Removal of this module might have performance impact on Outlook For Web and Active-Sync" +
                "`r`nYou can find more information on: https://portal.msrc.microsoft.com/security-guidance/advisory/CVE-2023-21709. Do you want to proceed?"
                Operation = "Removing TokenCacheModule from IIS"
            }

            Show-Disclaimer @params
        }

        Write-Verbose ("Running Get-ExchangeServer to get list of all exchange servers")
        Set-ADServerSettings -ViewEntireForest $true
        $ExchangeServers = Get-ExchangeServer | Where-Object { $_.AdminDisplayVersion -like "Version 15*" -and $_.ServerRole -ne "Edge" }

        if ($null -ne $ExchangeServerNames -and $ExchangeServerNames.Count -gt 0) {
            Write-Verbose "Running only on servers: $([string]::Join(", " ,$ExchangeServerNames))"
            $ExchangeServers = $ExchangeServers | Where-Object { ($_.Name -in $ExchangeServerNames) -or ($_.FQDN -in $ExchangeServerNames) }
        }

        if ($null -ne $SkipExchangeServerNames -and $SkipExchangeServerNames.Count -gt 0) {
            Write-Verbose "Skipping servers: $([string]::Join(", ", $SkipExchangeServerNames))"

            # Remove all the servers present in the SkipExchangeServerNames list
            $ExchangeServers = $ExchangeServers | Where-Object { ($_.Name -notin $SkipExchangeServerNames) -and ($_.FQDN -notin $SkipExchangeServerNames) }
        }

        if ($null -eq $ExchangeServers) {
            Write-Host "No exchange servers to process. Please specify server filters correctly"
            exit
        }

        if ($Rollback) {
            Invoke-Rollback -ExchangeServers $ExchangeServers
            return
        }

        Invoke-ConfigureMitigation -ExchangeServers $ExchangeServers
        return
    } finally {
        Write-Host ""
        Write-Host "Script Completed successfully!"
        Write-Host "Do you have feedback regarding the script? Please email ExToolsFeedback@microsoft.com."
    }
}
