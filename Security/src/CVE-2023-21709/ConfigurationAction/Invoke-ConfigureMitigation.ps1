# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

. $PSScriptRoot\..\..\..\..\Shared\Invoke-ScriptBlockHandler.ps1
. $PSScriptRoot\..\..\..\..\Shared\Write-ErrorInformation.ps1

function Invoke-ConfigureMitigation {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string[]]$ExchangeServers
    )

    begin {
        $FailedServers =  New-Object 'System.Collections.Generic.List[string]'
        $NoImpactServers =  New-Object 'System.Collections.Generic.List[string]'

        $progressParams = @{
            Activity        = "Removing TokenCachingModule"
            Status          = [string]::Empty
            PercentComplete = 0
        }

        Write-Verbose "Calling: $($MyInvocation.MyCommand)"

        $ConfigureMitigation = {
            $results = @{
                IsMitigationRequired = $true
                IsSuccessful         = $false
                ErrorContext         = $null
            }

            try {
                if ($null -eq (Get-WebGlobalModule -Name "TokenCacheModule")) {
                    $results.IsMitigationRequired = $false
                    return $results
                }

                Clear-WebConfiguration -Filter "/system.webServer/globalModules/add[@name='TokenCacheModule']" -PSPath "IIS:\" -ErrorAction Stop
                if (-not $WhatIfPreference) {
                    if ($null -eq (Get-WebGlobalModule -Name "TokenCacheModule")) {
                        $results.IsSuccessful = $true
                    }
                }
            } catch {
                $results.ErrorContext = $_
            }

            return $results
        }
    } process {
        $counter = 0
        $totalCount = $ExchangeServers.Count

        if ($WhatIfPreference) {
            Write-Host ("What if: Will perform the below actions on the following servers: {0}" -f [string]::Join(", ", $ExchangeServers))
        }

        foreach ($Server in $ExchangeServers) {
            $baseStatus = "Processing: $Server -"
            $progressParams.PercentComplete = ($counter / $totalCount * 100)
            $progressParams.Status = "$baseStatus Applying mitigation"
            Write-Progress @progressParams

            $counter ++;

            if (-not $WhatIfPreference -or ($Server).Split(".")[0] -eq $env:COMPUTERNAME) {
                Write-Verbose ("Calling Invoke-ScriptBlockHandler on Server {0}" -f $Server)
                $resultsInvoke = Invoke-ScriptBlockHandler -ComputerName $Server -ScriptBlock $ConfigureMitigation
            }

            if (-not $WhatIfPreference) {
                if ($null -eq $resultsInvoke) {
                    Write-Warning ("Server {0} is unavailable. Skipping it!" -f $Server)
                    $FailedServers += $Server
                    continue;
                }

                if (-not $resultsInvoke.IsMitigationRequired) {
                    Write-Verbose ("Mitigation is not required on server {0}" -f $Server)
                    $NoImpactServers += $Server
                    continue
                }

                if ($resultsInvoke.IsSuccessful) {
                    Write-Verbose ("Successfully applied mitigation on server {0}" -f $Server)
                } else {
                    Write-Host ("Script failed to apply mitigation on server {0}" -f $Server) -ForegroundColor Red
                    $FailedServers += $Server
                    continue
                }
            }
        }
    } end {
        Write-Progress @progressParams -Completed

        if (-not $WhatIfPreference) {
            if ($FailedServers.Length -gt 0) {
                Write-Host ("Unable to apply mitigation of following servers: {0}" -f [string]::Join(", ", $FailedServers)) -ForegroundColor Red
            }

            if ($NoImpactServers.Length -gt 0) {
                Write-Host ("No mitigation required for the following servers : {0}. These servers have already been mitigated." -f [string]::Join(", ", $NoImpactServers))
            }
        }
    }
}
