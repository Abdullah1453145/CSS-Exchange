# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

. $PSScriptRoot\..\Add-AnalyzedResultInformation.ps1
. $PSScriptRoot\..\Get-DisplayResultsGroupingKey.ps1
. $PSScriptRoot\Invoke-AnalyzerSecurityCveCheck.ps1
Function Invoke-AnalyzerSecurityVulnerability {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [ref]$AnalyzeResults,

        [Parameter(Mandatory = $true)]
        [object]$HealthServerObject,

        [Parameter(Mandatory = $true)]
        [int]$Order
    )

    Write-Verbose "Calling: $($MyInvocation.MyCommand)"
    $keySecurityVulnerability = Get-DisplayResultsGroupingKey -Name "Security Vulnerability"  -DisplayOrder $Order

    $Script:AllVulnerabilitiesPassed = $true
    $Script:Vulnerabilities = @()
    Invoke-AnalyzerSecurityCveCheck -AnalyzeResults $AnalyzeResults -HealthServerObject $HealthServerObject -KeySecuritySettings $keySecurityVulnerability

    if ($Script:AllVulnerabilitiesPassed) {
        $AnalyzeResults | Add-AnalyzedResultInformation -Details "All known security issues in this version of the script passed." `
            -DisplayGroupingKey $keySecurityVulnerability `
            -DisplayWriteType "Green" `
            -AddHtmlDetailRow $false

        $AnalyzeResults | Add-AnalyzedResultInformation -Name "Security Vulnerabilities" -Details "None" `
            -AddDisplayResultsLineInfo $false `
            -AddHtmlOverviewValues $true
    } else {

        $details = $Script:Vulnerabilities |
            ForEach-Object {
                return $_ + "<br>"
            }

        $AnalyzeResults | Add-AnalyzedResultInformation -Name "Security Vulnerabilities" -Details $details `
            -AddDisplayResultsLineInfo $false `
            -DisplayWriteType "Red"

        $AnalyzeResults | Add-AnalyzedResultInformation -Name "Vulnerability Detected" -Details $true `
            -AddDisplayResultsLineInfo $false `
            -DisplayWriteType "Red" `
            -AddHtmlOverviewValues $true `
            -AddHtmlDetailRow $false
    }
}
